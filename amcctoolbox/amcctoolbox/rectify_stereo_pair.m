% rectify_stereo_pair.m
%
% Script file that rectifies a set of stereo images after stereo calibration
% This script loads the stereo calibration file Calib_Results_stereo generated by calib_stereo.m
% Therefore, type help calib_stereo for more information.

generate_rectification_matrices;

% The resulting left and right camera matrices:
KK_left_rect = [fc_left_rect(1) fc_left_rect(1)*alpha_c_left_rect cc_left_rect(1);0 fc_left_rect(2) cc_left_rect(2); 0 0 1];
KK_right_rect = [fc_right_rect(1) fc_right_rect(1)*alpha_c_right cc_right_rect(1);0 fc_right_rect(2) cc_right_rect(2); 0 0 1];

% The sizes of the images are the same:
nx_right_rect = nx;
ny_right_rect = ny;
nx_left_rect = nx;
ny_left_rect = ny;

% Save the resulting extrinsic and intrinsic paramters into a file:
fprintf(1,'Saving the *NEW* set of intrinsic and extrinsic parameters corresponding to the images *AFTER* rectification under Calib_Results_stereo_rectified.mat...\n\n');
save Calib_Results_stereo_rectified om_rect R_rect T_rect  fc_left_rect cc_left_rect kc_left_rect alpha_c_left_rect KK_left_rect fc_right_rect cc_right_rect kc_right_rect alpha_c_right_rect KK_right_rect nx_right_rect ny_right_rect nx_left_rect ny_left_rect



% Let's rectify the entire set of calibration images:

fprintf(1,'Pre-computing the necessary data to quickly rectify the images (may take a while depending on the image resolution, but needs to be done only once - even for color images)...\n\n');

% Pre-compute the necessary indices and blending coefficients to enable quick rectification: 
[Irec_junk_left,ind_rect_left,ind_1_left,ind_2_left,ind_3_left,ind_4_left,a1_left,a2_left,a3_left,a4_left] = rect_index(zeros(ny,nx),R_L,fc_left,cc_left,kc_left,alpha_c_left,KK_left_rect);
[Irec_junk_left,ind_rect_right,ind_1_right,ind_2_right,ind_3_right,ind_4_right,a1_right,a2_right,a3_right,a4_right] = rect_index(zeros(ny,nx),R_R,fc_right,cc_right,kc_right,alpha_c_right,KK_right_rect);

clear Irec_junk_left

if 0,
    %% Test of rectification for 2 images:
    
    % left image:
    I = double(rgb2gray(imread('left.jpg')));
    I2 = 255*ones(ny,nx);
    I2(ind_rect_left) = uint8(a1_left .* I(ind_1_left) + a2_left .* I(ind_2_left) + a3_left .* I(ind_3_left) + a4_left .* I(ind_4_left));
    imwrite(uint8(I2),gray(256),'left_rect.jpg','jpg');
    
    % right image:
    I = double(rgb2gray(imread('right.jpg')));
    I2 = 255*ones(ny,nx);
    I2(ind_rect_right) = uint8(a1_right .* I(ind_1_right) + a2_right .* I(ind_2_right) + a3_right .* I(ind_3_right) + a4_right .* I(ind_4_right));
    imwrite(uint8(I2),gray(256),'right_rect.jpg','jpg');
    
end;

if (~exist('input_dir','var'))
    input_dir = '';
end


% Loop around all the frames now: (if there are images to rectify)

if ~isempty(calib_name_left)&~isempty(calib_name_right),
    
    fprintf(1,'Rectifying all the images (this should be fast)...\n\n');
    
    % Rectify all the images: (This is fastest way to proceed: precompute the set of image indices, and blending coefficients before actual image warping!)
    
    for kk = find(active_images);
        
        % Left image:
        
        I = load_image(kk,calib_name_left,format_image_left,type_numbering_left,image_numbers_left,N_slots_left, input_dir);
        
        fprintf(1,'Image warping...\n');
        
        I2 = 255*ones(ny,nx);
        I2(ind_rect_left) = uint8(a1_left .* I(ind_1_left) + a2_left .* I(ind_2_left) + a3_left .* I(ind_3_left) + a4_left .* I(ind_4_left));
        
        write_image(I2,kk,[calib_name_left '_rectified'],format_image_left,type_numbering_left,image_numbers_left,N_slots_left, [input_dir 'rectified/']),
        
        fprintf(1,'\n');
        
        % Right image:
        
        I = load_image(kk,calib_name_right,format_image_right,type_numbering_right,image_numbers_right,N_slots_right, input_dir);
        
        fprintf(1,'Image warping...\n');
        
        I2 = 255*ones(ny,nx);
        I2(ind_rect_right) = uint8(a1_right .* I(ind_1_right) + a2_right .* I(ind_2_right) + a3_right .* I(ind_3_right) + a4_right .* I(ind_4_right));
        
        write_image(I2,kk,[calib_name_right '_rectified'],format_image_right,type_numbering_right,image_numbers_right,N_slots_right, [input_dir 'rectified/']);
        
        fprintf(1,'\n');
        
    end;
    
end;

