Pulsefield OSC Protocol
Version 2.2.2

Objectives:
     - transmit real time data to MAX/SC/LiveOSC/ChucK/Java efficiently
     - everything should be possible (ie. send all locations, velocities, etc)
     - easy to use in applications

Design:
     - use OSC message prefixes
     - can use OSC-Select in max to route
     - can overlay processed data (such as step seq notes), to allow easier interfacing to some blocks

OSC Messages from PF (vision tracker)

Notes:
     - All dimensions in meters, speeds in m/s
     - (x,y) positions are relative to sensor;
	(0,1) is 1m directly in front of sensor,
	(1,0) is 1m to the right of sensor (from the sensor's point of view)
     - Headings are in degrees from -180 to +180
        0 degrees is in the (0,1) direction (directly away from sensor)
	heading of -90 degrees is in the (1,0) direction
	heading of +90 degrees is in the (-1,0) direction
	e.g.   vx=-speed*sin(heading), vy=speed*cos(heading)
     - Positions are instanteous best estimates
     - Velocities, speeds, headings, legsizes, etc are time-averaged best estimates over previous several frames
     - Grouping is based on proximity
        - formed when people approach within 'groupdist' meters of someone else (based on body position)
	- broken when people are separated by more then 'ungroupdist' meters
     - Channels are assigned sequentially such that:
        - channel numbers 1..numchannels
	- new person gets lowest unused channel number if one available
	- if more than numchannels people, then lowest channel with only 1 person is assigned (etc for 2,3.. people/channel)
     - setup messages are only sent when PF first starts or when a new destination is added
     - it is possible that frames are skipped; listeners should be robust against lost messages, etc.

/pf/started - when PF starts 

/pf/stopped - when PF stops

/pf/frame samp - new frame (sent before any other messages for the frame)
     samp - sample number

/pf/update samp t target x y vx vy major minor groupid groupsize channel
	   - update position of target
     samp - sample number
     t - time of sample (elapsed time in seconds since beginning of run) 
     target - UID of target, always increments for next new person without resetting
     x,y - position within field in meters
     vx,vy - estimate of velocity in m/s
     major,minor - major/minor axis size in m
     groupid - id number of group (0 if not in any group), groups start at 1 and new groups are assigned as 1 higher than the highest current group. Groups are formed when people are within 'groupdist' of another person and are broken when more than 'ungroupdist' (See /pf/set messages)
     groupsize - number of people in group (including this person, so always at least 1)
     channel - channel number assigned (from 1..numchannels; see /pf/set messages)
     
/pf/leg samp target leg nlegs x y ex ey spd espd heading eheading visibility 
     samp - sample number 
     target - UID of target
     leg - leg number (0..nlegs-1)
     nlegs - number of legs target is modeled with (usually 2, but could be 1 if they are inseparable)
     x,y - position within field in m
     ex,ey - standard error of measurement (SEM) of position, in meters 
     spd, heading - estimate of speed of leg in m/s, heading in degrees
     espd, eheading - SEM of spd, heading
     visibility - number of frames since a positive fix was found for this leg

/pf/body samp target x y ex ey spd espd heading eheading facing efacing legdiam sigmadiam sep sigmasep leftness visibility
     samp - sample number 
     target - UID of target
     x,y - position of person within field in m
     ex,ey - standard error of measurement (SEM) of position, in meters 
     spd, heading - estimate of speed of person in m/s, heading in degrees
     espd, eheading - SEM of spd, heading
     facing - direction person is facing in degees
     efacing - SEM of facing direction
     legdiam - estimated mean diameter of legs (both are the same)
     sigmadiam - estimated sigma (sqrt(variance)) of diameter -- not the SEM, but how much it varies
     sep - estimated mean separation of legs (center-to-center)
     sigmasep - estimated sigma (sqrt(variance)) of sep -- not the SEM, but how much it varies
     leftness - measure of how likely leg 0 is the left leg based on past movements, <0 is left leg, >0 is right leg
     visibility - number of frames since a positive fix was found for either leg

/pf/group samp gid gsize duration centroidX centroidY diameter
     samp - sample number
     gid - group ID (used in individual /pf/update messages), always increments for new group without resetting
     gsize - number of people in group
     duration - time since first formed in seconds
     centroidX, centroidY - location of centroid of group
     diameter - current diameter (mean distance of individuals from centroid)

/pf/geo samp target fromcenter fromothers fromexit
     samp - sample number 
     target - UID of target
     fromcenter -This person's distance from geographic center of everyone (in meters)
     fromnearest - This person's distance from the nearest other person (-1 if nobody else)
     fromexit - This person's distance from nearest exit from tracked area

/pf/entry samp t target channel - new target entered PF
     sent before first /pf/update message for that target
     samp - sample number
     t - time of sample (elapsed time in seconds since beginning of run)
     target - UID of target
     channel - channel number assigned

/pf/exit samp t target - target exitted PF
     samp - sample number
     t - time of sample (elapsed time in seconds since beginning of run)
     target - UID of target

/pf/set/parameter value - value of various parameters sent from tracker to applications (unless otherwise noted, sent every 2000 frames)
     protoversion - protocol version (string) 
     minx, miny, maxx, maxy - bounds of PF in meters
     npeople - number of people currently present (sent each time this number changes)
     ngroups - number of groups currently present (sent each time this number changes)
     groupdist - distance used for forming groups
     ungroupdist - distance for breaking groups
     numchannels - number of channels
     fps - frames per second
     source - string describing where the data came from
     starttime - time in UTC corresponding to sample time 0 above (OSC Time tag semantics, but as two integers)

/pf/background pt totalpts angleDeg distance  - background (walls) of scan
     pt - point number (starts at 0)
     totalpts - total points per full scan (typically 381)
     angleDeg - angle from LIDAR in degrees
     distance - distance from LIDAR in meters
- one background message is sent per frame; it takes 381 frames to get all the background
	       
/ack code - response to /ping
     code - same code value as in /ping message

OSC Messages to PF:
/pf/dump - ask PF to resend setup

/pf/adddest host port fps - add destination for data stream
      all data is broadcast to all known destinations
      fps - requested frame rate

/pf/rmdest host port - remove destination

/ping code - request /ack response with same code from tracker
      e.g. app sends '/ping 45' and server will broadcast '/ack 45'
      the code allows app to be sure its getting an answer to the ping it sent


Client Recommendations:
As a general procedure for dealing with dropped packets,a client can:
- when it receives /pf/update (or leg, body), update an internal data structure with the new data (so it will still be reasonable if you miss a frame)
- if it receives an update for an id you don't have, assume a /pf/entry was missed
- if it receives an /pf/set/npeople with a smaller number than you currently have, assume you missed a /pf/exit.   Easiest way to do that is to drop everybody and then let subsequent updates re-add them.
